// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public static partial class MovieClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::MovieApp.Client.GraphQLAPIClient.State.MovieClientStoreAccessor> AddMovieClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::MovieApp.Client.GraphQLAPIClient.State.MovieClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.EditMovieDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.FetchMovieListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.AddMovieDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.DeleteMovieDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.FetchGenreListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.FilterMovieByIDQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.SortMovieListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.MovieClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IMovieClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::MovieApp.Client.GraphQLAPIClient.State.MovieClientStoreAccessor>("MovieClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("MovieClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MovieApp.Client.GraphQLAPIClient.SortEnumTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MovieApp.Client.GraphQLAPIClient.MovieInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MovieApp.Client.GraphQLAPIClient.MovieFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MovieApp.Client.GraphQLAPIClient.ComparableInt32OperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MovieApp.Client.GraphQLAPIClient.ComparableNullableOfDecimalOperationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MovieApp.Client.GraphQLAPIClient.MovieSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult>, global::MovieApp.Client.GraphQLAPIClient.State.EditMovieDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult>, global::MovieApp.Client.GraphQLAPIClient.State.EditMovieDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.EditMovieDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.EditMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult>, global::MovieApp.Client.GraphQLAPIClient.State.FetchMovieListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult>, global::MovieApp.Client.GraphQLAPIClient.State.FetchMovieListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.FetchMovieListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.FetchMovieListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>, global::MovieApp.Client.GraphQLAPIClient.State.AddMovieDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>, global::MovieApp.Client.GraphQLAPIClient.State.AddMovieDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.AddMovieDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.AddMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult>, global::MovieApp.Client.GraphQLAPIClient.State.DeleteMovieDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult>, global::MovieApp.Client.GraphQLAPIClient.State.DeleteMovieDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.DeleteMovieDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.DeleteMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>, global::MovieApp.Client.GraphQLAPIClient.State.FetchGenreListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>, global::MovieApp.Client.GraphQLAPIClient.State.FetchGenreListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.FetchGenreListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.FetchGenreListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult>, global::MovieApp.Client.GraphQLAPIClient.State.FilterMovieByIDResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult>, global::MovieApp.Client.GraphQLAPIClient.State.FilterMovieByIDBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.FilterMovieByIDQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.FilterMovieByIDQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult>, global::MovieApp.Client.GraphQLAPIClient.State.SortMovieListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.ISortMovieListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult>, global::MovieApp.Client.GraphQLAPIClient.State.SortMovieListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.SortMovieListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.ISortMovieListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.SortMovieListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::MovieApp.Client.GraphQLAPIClient.State.MovieClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.MovieClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IMovieClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.MovieClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace MovieApp.Client.GraphQLAPIClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class EditMovieDataResult : global::System.IEquatable<EditMovieDataResult>, IEditMovieDataResult
    {
        public EditMovieDataResult(global::MovieApp.Client.GraphQLAPIClient.IEditMovieData_EditMovie editMovie)
        {
            EditMovie = editMovie;
        }

        /// <summary>
        /// Edit an existing movie-data.
        /// </summary>
        public global::MovieApp.Client.GraphQLAPIClient.IEditMovieData_EditMovie EditMovie { get; }

        public virtual global::System.Boolean Equals(EditMovieDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EditMovie.Equals(other.EditMovie));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditMovieDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EditMovie.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class EditMovieData_EditMovie_AddMoviePayload : global::System.IEquatable<EditMovieData_EditMovie_AddMoviePayload>, IEditMovieData_EditMovie_AddMoviePayload
    {
        public EditMovieData_EditMovie_AddMoviePayload(global::MovieApp.Client.GraphQLAPIClient.IEditMovieData_EditMovie_Movie movie)
        {
            Movie = movie;
        }

        public global::MovieApp.Client.GraphQLAPIClient.IEditMovieData_EditMovie_Movie Movie { get; }

        public virtual global::System.Boolean Equals(EditMovieData_EditMovie_AddMoviePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Movie.Equals(other.Movie));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditMovieData_EditMovie_AddMoviePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Movie.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class EditMovieData_EditMovie_Movie_Movie : global::System.IEquatable<EditMovieData_EditMovie_Movie_Movie>, IEditMovieData_EditMovie_Movie_Movie
    {
        public EditMovieData_EditMovie_Movie_Movie(global::System.String title)
        {
            Title = title;
        }

        public global::System.String Title { get; }

        public virtual global::System.Boolean Equals(EditMovieData_EditMovie_Movie_Movie? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Title.Equals(other.Title));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((EditMovieData_EditMovie_Movie_Movie)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Title.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IEditMovieDataResult
    {
        /// <summary>
        /// Edit an existing movie-data.
        /// </summary>
        public global::MovieApp.Client.GraphQLAPIClient.IEditMovieData_EditMovie EditMovie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IEditMovieData_EditMovie
    {
        public global::MovieApp.Client.GraphQLAPIClient.IEditMovieData_EditMovie_Movie Movie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IEditMovieData_EditMovie_AddMoviePayload : IEditMovieData_EditMovie
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IEditMovieData_EditMovie_Movie
    {
        public global::System.String Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IEditMovieData_EditMovie_Movie_Movie : IEditMovieData_EditMovie_Movie
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchMovieListResult : global::System.IEquatable<FetchMovieListResult>, IFetchMovieListResult
    {
        public FetchMovieListResult(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieList_MovieList> movieList)
        {
            MovieList = movieList;
        }

        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieList_MovieList> MovieList { get; }

        public virtual global::System.Boolean Equals(FetchMovieListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MovieList, other.MovieList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchMovieListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var MovieList_elm in MovieList)
                {
                    hash ^= 397 * MovieList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchMovieList_MovieList_Movie : global::System.IEquatable<FetchMovieList_MovieList_Movie>, IFetchMovieList_MovieList_Movie
    {
        public FetchMovieList_MovieList_Movie(global::System.Int32 movieId, global::System.String title, global::System.String? posterPath, global::System.String genre, global::System.Decimal rating, global::System.String language, global::System.Int32 duration)
        {
            MovieId = movieId;
            Title = title;
            PosterPath = posterPath;
            Genre = genre;
            Rating = rating;
            Language = language;
            Duration = duration;
        }

        public global::System.Int32 MovieId { get; }
        public global::System.String Title { get; }
        public global::System.String? PosterPath { get; }
        public global::System.String Genre { get; }
        public global::System.Decimal Rating { get; }
        public global::System.String Language { get; }
        public global::System.Int32 Duration { get; }

        public virtual global::System.Boolean Equals(FetchMovieList_MovieList_Movie? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (MovieId == other.MovieId) && Title.Equals(other.Title) && ((PosterPath is null && other.PosterPath is null) || PosterPath != null && PosterPath.Equals(other.PosterPath)) && Genre.Equals(other.Genre) && Rating == other.Rating && Language.Equals(other.Language) && Duration == other.Duration;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchMovieList_MovieList_Movie)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * MovieId.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                if (PosterPath != null)
                {
                    hash ^= 397 * PosterPath.GetHashCode();
                }

                hash ^= 397 * Genre.GetHashCode();
                hash ^= 397 * Rating.GetHashCode();
                hash ^= 397 * Language.GetHashCode();
                hash ^= 397 * Duration.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchMovieListResult
    {
        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieList_MovieList> MovieList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchMovieList_MovieList
    {
        public global::System.Int32 MovieId { get; }
        public global::System.String Title { get; }
        public global::System.String? PosterPath { get; }
        public global::System.String Genre { get; }
        public global::System.Decimal Rating { get; }
        public global::System.String Language { get; }
        public global::System.Int32 Duration { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchMovieList_MovieList_Movie : IFetchMovieList_MovieList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataResult : global::System.IEquatable<AddMovieDataResult>, IAddMovieDataResult
    {
        public AddMovieDataResult(global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie addMovie)
        {
            AddMovie = addMovie;
        }

        /// <summary>
        /// Add new movie data.
        /// </summary>
        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie AddMovie { get; }

        public virtual global::System.Boolean Equals(AddMovieDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddMovie.Equals(other.AddMovie));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddMovieDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddMovie.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieData_AddMovie_AddMoviePayload : global::System.IEquatable<AddMovieData_AddMovie_AddMoviePayload>, IAddMovieData_AddMovie_AddMoviePayload
    {
        public AddMovieData_AddMovie_AddMoviePayload(global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie_Movie movie)
        {
            Movie = movie;
        }

        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie_Movie Movie { get; }

        public virtual global::System.Boolean Equals(AddMovieData_AddMovie_AddMoviePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Movie.Equals(other.Movie));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddMovieData_AddMovie_AddMoviePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Movie.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieData_AddMovie_Movie_Movie : global::System.IEquatable<AddMovieData_AddMovie_Movie_Movie>, IAddMovieData_AddMovie_Movie_Movie
    {
        public AddMovieData_AddMovie_Movie_Movie(global::System.String title)
        {
            Title = title;
        }

        public global::System.String Title { get; }

        public virtual global::System.Boolean Equals(AddMovieData_AddMovie_Movie_Movie? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Title.Equals(other.Title));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddMovieData_AddMovie_Movie_Movie)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Title.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieDataResult
    {
        /// <summary>
        /// Add new movie data.
        /// </summary>
        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie AddMovie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieData_AddMovie
    {
        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie_Movie Movie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieData_AddMovie_AddMoviePayload : IAddMovieData_AddMovie
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieData_AddMovie_Movie
    {
        public global::System.String Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieData_AddMovie_Movie_Movie : IAddMovieData_AddMovie_Movie
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class DeleteMovieDataResult : global::System.IEquatable<DeleteMovieDataResult>, IDeleteMovieDataResult
    {
        public DeleteMovieDataResult(global::System.Int32 deleteMovie)
        {
            DeleteMovie = deleteMovie;
        }

        /// <summary>
        /// Delete a movie
        /// </summary>
        public global::System.Int32 DeleteMovie { get; }

        public virtual global::System.Boolean Equals(DeleteMovieDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteMovie == other.DeleteMovie);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteMovieDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteMovie.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IDeleteMovieDataResult
    {
        /// <summary>
        /// Delete a movie
        /// </summary>
        public global::System.Int32 DeleteMovie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListResult : global::System.IEquatable<FetchGenreListResult>, IFetchGenreListResult
    {
        public FetchGenreListResult(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList> genreList)
        {
            GenreList = genreList;
        }

        /// <summary>
        /// gets the list of genres
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList> GenreList { get; }

        public virtual global::System.Boolean Equals(FetchGenreListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(GenreList, other.GenreList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchGenreListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var GenreList_elm in GenreList)
                {
                    hash ^= 397 * GenreList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreList_GenreList_Genre : global::System.IEquatable<FetchGenreList_GenreList_Genre>, IFetchGenreList_GenreList_Genre
    {
        public FetchGenreList_GenreList_Genre(global::System.Int32 genreId, global::System.String genreName)
        {
            GenreId = genreId;
            GenreName = genreName;
        }

        public global::System.Int32 GenreId { get; }
        public global::System.String GenreName { get; }

        public virtual global::System.Boolean Equals(FetchGenreList_GenreList_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && GenreName.Equals(other.GenreName);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchGenreList_GenreList_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                hash ^= 397 * GenreName.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchGenreListResult
    {
        /// <summary>
        /// gets the list of genres
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList> GenreList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchGenreList_GenreList
    {
        public global::System.Int32 GenreId { get; }
        public global::System.String GenreName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchGenreList_GenreList_Genre : IFetchGenreList_GenreList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FilterMovieByIDResult : global::System.IEquatable<FilterMovieByIDResult>, IFilterMovieByIDResult
    {
        public FilterMovieByIDResult(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByID_MovieList> movieList)
        {
            MovieList = movieList;
        }

        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByID_MovieList> MovieList { get; }

        public virtual global::System.Boolean Equals(FilterMovieByIDResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MovieList, other.MovieList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FilterMovieByIDResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var MovieList_elm in MovieList)
                {
                    hash ^= 397 * MovieList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FilterMovieByID_MovieList_Movie : global::System.IEquatable<FilterMovieByID_MovieList_Movie>, IFilterMovieByID_MovieList_Movie
    {
        public FilterMovieByID_MovieList_Movie(global::System.Int32 movieId, global::System.String title, global::System.String? posterPath, global::System.String genre, global::System.Decimal rating, global::System.String language, global::System.Int32 duration)
        {
            MovieId = movieId;
            Title = title;
            PosterPath = posterPath;
            Genre = genre;
            Rating = rating;
            Language = language;
            Duration = duration;
        }

        public global::System.Int32 MovieId { get; }
        public global::System.String Title { get; }
        public global::System.String? PosterPath { get; }
        public global::System.String Genre { get; }
        public global::System.Decimal Rating { get; }
        public global::System.String Language { get; }
        public global::System.Int32 Duration { get; }

        public virtual global::System.Boolean Equals(FilterMovieByID_MovieList_Movie? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (MovieId == other.MovieId) && Title.Equals(other.Title) && ((PosterPath is null && other.PosterPath is null) || PosterPath != null && PosterPath.Equals(other.PosterPath)) && Genre.Equals(other.Genre) && Rating == other.Rating && Language.Equals(other.Language) && Duration == other.Duration;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FilterMovieByID_MovieList_Movie)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * MovieId.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                if (PosterPath != null)
                {
                    hash ^= 397 * PosterPath.GetHashCode();
                }

                hash ^= 397 * Genre.GetHashCode();
                hash ^= 397 * Rating.GetHashCode();
                hash ^= 397 * Language.GetHashCode();
                hash ^= 397 * Duration.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFilterMovieByIDResult
    {
        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByID_MovieList> MovieList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFilterMovieByID_MovieList
    {
        public global::System.Int32 MovieId { get; }
        public global::System.String Title { get; }
        public global::System.String? PosterPath { get; }
        public global::System.String Genre { get; }
        public global::System.Decimal Rating { get; }
        public global::System.String Language { get; }
        public global::System.Int32 Duration { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFilterMovieByID_MovieList_Movie : IFilterMovieByID_MovieList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class SortMovieListResult : global::System.IEquatable<SortMovieListResult>, ISortMovieListResult
    {
        public SortMovieListResult(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.ISortMovieList_MovieList> movieList)
        {
            MovieList = movieList;
        }

        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.ISortMovieList_MovieList> MovieList { get; }

        public virtual global::System.Boolean Equals(SortMovieListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MovieList, other.MovieList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SortMovieListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var MovieList_elm in MovieList)
                {
                    hash ^= 397 * MovieList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class SortMovieList_MovieList_Movie : global::System.IEquatable<SortMovieList_MovieList_Movie>, ISortMovieList_MovieList_Movie
    {
        public SortMovieList_MovieList_Movie(global::System.Int32 movieId, global::System.String title, global::System.String? posterPath, global::System.String genre, global::System.Decimal rating, global::System.String language, global::System.Int32 duration)
        {
            MovieId = movieId;
            Title = title;
            PosterPath = posterPath;
            Genre = genre;
            Rating = rating;
            Language = language;
            Duration = duration;
        }

        public global::System.Int32 MovieId { get; }
        public global::System.String Title { get; }
        public global::System.String? PosterPath { get; }
        public global::System.String Genre { get; }
        public global::System.Decimal Rating { get; }
        public global::System.String Language { get; }
        public global::System.Int32 Duration { get; }

        public virtual global::System.Boolean Equals(SortMovieList_MovieList_Movie? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (MovieId == other.MovieId) && Title.Equals(other.Title) && ((PosterPath is null && other.PosterPath is null) || PosterPath != null && PosterPath.Equals(other.PosterPath)) && Genre.Equals(other.Genre) && Rating == other.Rating && Language.Equals(other.Language) && Duration == other.Duration;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SortMovieList_MovieList_Movie)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * MovieId.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                if (PosterPath != null)
                {
                    hash ^= 397 * PosterPath.GetHashCode();
                }

                hash ^= 397 * Genre.GetHashCode();
                hash ^= 397 * Rating.GetHashCode();
                hash ^= 397 * Language.GetHashCode();
                hash ^= 397 * Duration.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface ISortMovieListResult
    {
        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.ISortMovieList_MovieList> MovieList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface ISortMovieList_MovieList
    {
        public global::System.Int32 MovieId { get; }
        public global::System.String Title { get; }
        public global::System.String? PosterPath { get; }
        public global::System.String Genre { get; }
        public global::System.Decimal Rating { get; }
        public global::System.String Language { get; }
        public global::System.Int32 Duration { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface ISortMovieList_MovieList_Movie : ISortMovieList_MovieList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        public global::System.String TypeName => "MovieInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.MovieInput;
            var inputInfo = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsMovieIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("movieId", FormatMovieId(input.MovieId)));
            }

            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsOverviewSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("overview", FormatOverview(input.Overview)));
            }

            if (inputInfo.IsGenreSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("genre", FormatGenre(input.Genre)));
            }

            if (inputInfo.IsLanguageSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("language", FormatLanguage(input.Language)));
            }

            if (inputInfo.IsDurationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("duration", FormatDuration(input.Duration)));
            }

            if (inputInfo.IsRatingSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rating", FormatRating(input.Rating)));
            }

            if (inputInfo.IsPosterPathSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("posterPath", FormatPosterPath(input.PosterPath)));
            }

            return fields;
        }

        private global::System.Object? FormatMovieId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatTitle(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatOverview(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatGenre(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatLanguage(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDuration(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatRating(global::System.Decimal input)
        {
            return _decimalFormatter.Format(input);
        }

        private global::System.Object? FormatPosterPath(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieInput : global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo, global::System.IEquatable<MovieInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MovieInput)obj);
        }

        public virtual global::System.Boolean Equals(MovieInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (MovieId == other.MovieId) && Title.Equals(other.Title) && Overview.Equals(other.Overview) && Genre.Equals(other.Genre) && Language.Equals(other.Language) && Duration == other.Duration && Rating == other.Rating && ((PosterPath is null && other.PosterPath is null) || PosterPath != null && PosterPath.Equals(other.PosterPath));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * MovieId.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * Overview.GetHashCode();
                hash ^= 397 * Genre.GetHashCode();
                hash ^= 397 * Language.GetHashCode();
                hash ^= 397 * Duration.GetHashCode();
                hash ^= 397 * Rating.GetHashCode();
                if (PosterPath != null)
                {
                    hash ^= 397 * PosterPath.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_movieId;
        private global::System.Boolean _set_movieId;
        private global::System.String _value_title = default !;
        private global::System.Boolean _set_title;
        private global::System.String _value_overview = default !;
        private global::System.Boolean _set_overview;
        private global::System.String _value_genre = default !;
        private global::System.Boolean _set_genre;
        private global::System.String _value_language = default !;
        private global::System.Boolean _set_language;
        private global::System.Int32 _value_duration;
        private global::System.Boolean _set_duration;
        private global::System.Decimal _value_rating;
        private global::System.Boolean _set_rating;
        private global::System.String? _value_posterPath;
        private global::System.Boolean _set_posterPath;
        public global::System.Int32 MovieId
        {
            get => _value_movieId;
            set
            {
                _set_movieId = true;
                _value_movieId = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsMovieIdSet => _set_movieId;

        public global::System.String Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsTitleSet => _set_title;

        public global::System.String Overview
        {
            get => _value_overview;
            set
            {
                _set_overview = true;
                _value_overview = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsOverviewSet => _set_overview;

        public global::System.String Genre
        {
            get => _value_genre;
            set
            {
                _set_genre = true;
                _value_genre = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsGenreSet => _set_genre;

        public global::System.String Language
        {
            get => _value_language;
            set
            {
                _set_language = true;
                _value_language = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsLanguageSet => _set_language;

        public global::System.Int32 Duration
        {
            get => _value_duration;
            set
            {
                _set_duration = true;
                _value_duration = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsDurationSet => _set_duration;

        public global::System.Decimal Rating
        {
            get => _value_rating;
            set
            {
                _set_rating = true;
                _value_rating = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsRatingSet => _set_rating;

        public global::System.String? PosterPath
        {
            get => _value_posterPath;
            set
            {
                _set_posterPath = true;
                _value_posterPath = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsPosterPathSet => _set_posterPath;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _movieFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _comparableInt32OperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _comparableNullableOfDecimalOperationFilterInputFormatter = default !;
        public global::System.String TypeName => "MovieFilterInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _movieFilterInputFormatter = serializerResolver.GetInputValueFormatter("MovieFilterInput");
            _comparableInt32OperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("ComparableInt32OperationFilterInput");
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _comparableNullableOfDecimalOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("ComparableNullableOfDecimalOperationFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput;
            var inputInfo = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsMovieIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("movieId", FormatMovieId(input.MovieId)));
            }

            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsOverviewSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("overview", FormatOverview(input.Overview)));
            }

            if (inputInfo.IsGenreSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("genre", FormatGenre(input.Genre)));
            }

            if (inputInfo.IsLanguageSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("language", FormatLanguage(input.Language)));
            }

            if (inputInfo.IsDurationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("duration", FormatDuration(input.Duration)));
            }

            if (inputInfo.IsRatingSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rating", FormatRating(input.Rating)));
            }

            if (inputInfo.IsPosterPathSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("posterPath", FormatPosterPath(input.PosterPath)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_movieFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_movieFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatMovieId(global::MovieApp.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableInt32OperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTitle(global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatOverview(global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGenre(global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLanguage(global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDuration(global::MovieApp.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableInt32OperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRating(global::MovieApp.Client.GraphQLAPIClient.ComparableNullableOfDecimalOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _comparableNullableOfDecimalOperationFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPosterPath(global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringOperationFilterInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieFilterInput : global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo, global::System.IEquatable<MovieFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MovieFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(MovieFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((MovieId is null && other.MovieId is null) || MovieId != null && MovieId.Equals(other.MovieId)) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && ((Overview is null && other.Overview is null) || Overview != null && Overview.Equals(other.Overview)) && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Language is null && other.Language is null) || Language != null && Language.Equals(other.Language)) && ((Duration is null && other.Duration is null) || Duration != null && Duration.Equals(other.Duration)) && ((Rating is null && other.Rating is null) || Rating != null && Rating.Equals(other.Rating)) && ((PosterPath is null && other.PosterPath is null) || PosterPath != null && PosterPath.Equals(other.PosterPath));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (MovieId != null)
                {
                    hash ^= 397 * MovieId.GetHashCode();
                }

                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Overview != null)
                {
                    hash ^= 397 * Overview.GetHashCode();
                }

                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Language != null)
                {
                    hash ^= 397 * Language.GetHashCode();
                }

                if (Duration != null)
                {
                    hash ^= 397 * Duration.GetHashCode();
                }

                if (Rating != null)
                {
                    hash ^= 397 * Rating.GetHashCode();
                }

                if (PosterPath != null)
                {
                    hash ^= 397 * PosterPath.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::MovieApp.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? _value_movieId;
        private global::System.Boolean _set_movieId;
        private global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? _value_title;
        private global::System.Boolean _set_title;
        private global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? _value_overview;
        private global::System.Boolean _set_overview;
        private global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? _value_genre;
        private global::System.Boolean _set_genre;
        private global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? _value_language;
        private global::System.Boolean _set_language;
        private global::MovieApp.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? _value_duration;
        private global::System.Boolean _set_duration;
        private global::MovieApp.Client.GraphQLAPIClient.ComparableNullableOfDecimalOperationFilterInput? _value_rating;
        private global::System.Boolean _set_rating;
        private global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? _value_posterPath;
        private global::System.Boolean _set_posterPath;
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsAndSet => _set_and;

        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsOrSet => _set_or;

        public global::MovieApp.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? MovieId
        {
            get => _value_movieId;
            set
            {
                _set_movieId = true;
                _value_movieId = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsMovieIdSet => _set_movieId;

        public global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsTitleSet => _set_title;

        public global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? Overview
        {
            get => _value_overview;
            set
            {
                _set_overview = true;
                _value_overview = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsOverviewSet => _set_overview;

        public global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? Genre
        {
            get => _value_genre;
            set
            {
                _set_genre = true;
                _value_genre = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsGenreSet => _set_genre;

        public global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? Language
        {
            get => _value_language;
            set
            {
                _set_language = true;
                _value_language = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsLanguageSet => _set_language;

        public global::MovieApp.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput? Duration
        {
            get => _value_duration;
            set
            {
                _set_duration = true;
                _value_duration = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsDurationSet => _set_duration;

        public global::MovieApp.Client.GraphQLAPIClient.ComparableNullableOfDecimalOperationFilterInput? Rating
        {
            get => _value_rating;
            set
            {
                _set_rating = true;
                _value_rating = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsRatingSet => _set_rating;

        public global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput? PosterPath
        {
            get => _value_posterPath;
            set
            {
                _set_posterPath = true;
                _value_posterPath = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieFilterInputInfo.IsPosterPathSet => _set_posterPath;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class ComparableInt32OperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "ComparableInt32OperationFilterInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.ComparableInt32OperationFilterInput;
            var inputInfo = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsGtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gt", FormatGt(input.Gt)));
            }

            if (inputInfo.IsNgtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngt", FormatNgt(input.Ngt)));
            }

            if (inputInfo.IsGteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gte", FormatGte(input.Gte)));
            }

            if (inputInfo.IsNgteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngte", FormatNgte(input.Ngte)));
            }

            if (inputInfo.IsLtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lt", FormatLt(input.Lt)));
            }

            if (inputInfo.IsNltSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlt", FormatNlt(input.Nlt)));
            }

            if (inputInfo.IsLteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lte", FormatLte(input.Lte)));
            }

            if (inputInfo.IsNlteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlte", FormatNlte(input.Nlte)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_intFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_intFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatGt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlt(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlte(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class ComparableInt32OperationFilterInput : global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo, global::System.IEquatable<ComparableInt32OperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ComparableInt32OperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ComparableInt32OperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Eq == other.Eq) && Neq == other.Neq && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && Gt == other.Gt && Ngt == other.Ngt && Gte == other.Gte && Ngte == other.Ngte && Lt == other.Lt && Nlt == other.Nlt && Lte == other.Lte && Nlte == other.Nlte;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        hash ^= 397 * In_elm.GetHashCode();
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        hash ^= 397 * Nin_elm.GetHashCode();
                    }
                }

                if (Gt != null)
                {
                    hash ^= 397 * Gt.GetHashCode();
                }

                if (Ngt != null)
                {
                    hash ^= 397 * Ngt.GetHashCode();
                }

                if (Gte != null)
                {
                    hash ^= 397 * Gte.GetHashCode();
                }

                if (Ngte != null)
                {
                    hash ^= 397 * Ngte.GetHashCode();
                }

                if (Lt != null)
                {
                    hash ^= 397 * Lt.GetHashCode();
                }

                if (Nlt != null)
                {
                    hash ^= 397 * Nlt.GetHashCode();
                }

                if (Lte != null)
                {
                    hash ^= 397 * Lte.GetHashCode();
                }

                if (Nlte != null)
                {
                    hash ^= 397 * Nlte.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.Int32? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.Int32? _value_gt;
        private global::System.Boolean _set_gt;
        private global::System.Int32? _value_ngt;
        private global::System.Boolean _set_ngt;
        private global::System.Int32? _value_gte;
        private global::System.Boolean _set_gte;
        private global::System.Int32? _value_ngte;
        private global::System.Boolean _set_ngte;
        private global::System.Int32? _value_lt;
        private global::System.Boolean _set_lt;
        private global::System.Int32? _value_nlt;
        private global::System.Boolean _set_nlt;
        private global::System.Int32? _value_lte;
        private global::System.Boolean _set_lte;
        private global::System.Int32? _value_nlte;
        private global::System.Boolean _set_nlte;
        public global::System.Int32? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsEqSet => _set_eq;

        public global::System.Int32? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNeqSet => _set_neq;

        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsInSet => _set_in;

        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNinSet => _set_nin;

        public global::System.Int32? Gt
        {
            get => _value_gt;
            set
            {
                _set_gt = true;
                _value_gt = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsGtSet => _set_gt;

        public global::System.Int32? Ngt
        {
            get => _value_ngt;
            set
            {
                _set_ngt = true;
                _value_ngt = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNgtSet => _set_ngt;

        public global::System.Int32? Gte
        {
            get => _value_gte;
            set
            {
                _set_gte = true;
                _value_gte = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsGteSet => _set_gte;

        public global::System.Int32? Ngte
        {
            get => _value_ngte;
            set
            {
                _set_ngte = true;
                _value_ngte = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNgteSet => _set_ngte;

        public global::System.Int32? Lt
        {
            get => _value_lt;
            set
            {
                _set_lt = true;
                _value_lt = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsLtSet => _set_lt;

        public global::System.Int32? Nlt
        {
            get => _value_nlt;
            set
            {
                _set_nlt = true;
                _value_nlt = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNltSet => _set_nlt;

        public global::System.Int32? Lte
        {
            get => _value_lte;
            set
            {
                _set_lte = true;
                _value_lte = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsLteSet => _set_lte;

        public global::System.Int32? Nlte
        {
            get => _value_nlte;
            set
            {
                _set_nlte = true;
                _value_nlte = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableInt32OperationFilterInputInfo.IsNlteSet => _set_nlte;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class StringOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringOperationFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "StringOperationFilterInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringOperationFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringOperationFilterInput");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput;
            var inputInfo = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAndSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("and", FormatAnd(input.And)));
            }

            if (inputInfo.IsOrSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("or", FormatOr(input.Or)));
            }

            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsContainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("contains", FormatContains(input.Contains)));
            }

            if (inputInfo.IsNcontainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ncontains", FormatNcontains(input.Ncontains)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsStartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("startsWith", FormatStartsWith(input.StartsWith)));
            }

            if (inputInfo.IsNstartsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nstartsWith", FormatNstartsWith(input.NstartsWith)));
            }

            if (inputInfo.IsEndsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("endsWith", FormatEndsWith(input.EndsWith)));
            }

            if (inputInfo.IsNendsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nendsWith", FormatNendsWith(input.NendsWith)));
            }

            return fields;
        }

        private global::System.Object? FormatAnd(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOr(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringOperationFilterInputFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatEq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatContains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNcontains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatStartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNstartsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEndsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNendsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class StringOperationFilterInput : global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo, global::System.IEquatable<StringOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StringOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(StringOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(And, other.And)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Or, other.Or) && ((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq)) && ((Neq is null && other.Neq is null) || Neq != null && Neq.Equals(other.Neq)) && ((Contains is null && other.Contains is null) || Contains != null && Contains.Equals(other.Contains)) && ((Ncontains is null && other.Ncontains is null) || Ncontains != null && Ncontains.Equals(other.Ncontains)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && ((StartsWith is null && other.StartsWith is null) || StartsWith != null && StartsWith.Equals(other.StartsWith)) && ((NstartsWith is null && other.NstartsWith is null) || NstartsWith != null && NstartsWith.Equals(other.NstartsWith)) && ((EndsWith is null && other.EndsWith is null) || EndsWith != null && EndsWith.Equals(other.EndsWith)) && ((NendsWith is null && other.NendsWith is null) || NendsWith != null && NendsWith.Equals(other.NendsWith));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (And != null)
                {
                    foreach (var And_elm in And)
                    {
                        hash ^= 397 * And_elm.GetHashCode();
                    }
                }

                if (Or != null)
                {
                    foreach (var Or_elm in Or)
                    {
                        hash ^= 397 * Or_elm.GetHashCode();
                    }
                }

                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (Contains != null)
                {
                    hash ^= 397 * Contains.GetHashCode();
                }

                if (Ncontains != null)
                {
                    hash ^= 397 * Ncontains.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        if (In_elm != null)
                        {
                            hash ^= 397 * In_elm.GetHashCode();
                        }
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        if (Nin_elm != null)
                        {
                            hash ^= 397 * Nin_elm.GetHashCode();
                        }
                    }
                }

                if (StartsWith != null)
                {
                    hash ^= 397 * StartsWith.GetHashCode();
                }

                if (NstartsWith != null)
                {
                    hash ^= 397 * NstartsWith.GetHashCode();
                }

                if (EndsWith != null)
                {
                    hash ^= 397 * EndsWith.GetHashCode();
                }

                if (NendsWith != null)
                {
                    hash ^= 397 * NendsWith.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput>? _value_and;
        private global::System.Boolean _set_and;
        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput>? _value_or;
        private global::System.Boolean _set_or;
        private global::System.String? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.String? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.String? _value_contains;
        private global::System.Boolean _set_contains;
        private global::System.String? _value_ncontains;
        private global::System.Boolean _set_ncontains;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.String? _value_startsWith;
        private global::System.Boolean _set_startsWith;
        private global::System.String? _value_nstartsWith;
        private global::System.Boolean _set_nstartsWith;
        private global::System.String? _value_endsWith;
        private global::System.Boolean _set_endsWith;
        private global::System.String? _value_nendsWith;
        private global::System.Boolean _set_nendsWith;
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput>? And
        {
            get => _value_and;
            set
            {
                _set_and = true;
                _value_and = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsAndSet => _set_and;

        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.StringOperationFilterInput>? Or
        {
            get => _value_or;
            set
            {
                _set_or = true;
                _value_or = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsOrSet => _set_or;

        public global::System.String? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsEqSet => _set_eq;

        public global::System.String? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNeqSet => _set_neq;

        public global::System.String? Contains
        {
            get => _value_contains;
            set
            {
                _set_contains = true;
                _value_contains = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsContainsSet => _set_contains;

        public global::System.String? Ncontains
        {
            get => _value_ncontains;
            set
            {
                _set_ncontains = true;
                _value_ncontains = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNcontainsSet => _set_ncontains;

        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsInSet => _set_in;

        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNinSet => _set_nin;

        public global::System.String? StartsWith
        {
            get => _value_startsWith;
            set
            {
                _set_startsWith = true;
                _value_startsWith = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsStartsWithSet => _set_startsWith;

        public global::System.String? NstartsWith
        {
            get => _value_nstartsWith;
            set
            {
                _set_nstartsWith = true;
                _value_nstartsWith = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNstartsWithSet => _set_nstartsWith;

        public global::System.String? EndsWith
        {
            get => _value_endsWith;
            set
            {
                _set_endsWith = true;
                _value_endsWith = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsEndsWithSet => _set_endsWith;

        public global::System.String? NendsWith
        {
            get => _value_nendsWith;
            set
            {
                _set_nendsWith = true;
                _value_nendsWith = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IStringOperationFilterInputInfo.IsNendsWithSet => _set_nendsWith;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class ComparableNullableOfDecimalOperationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        public global::System.String TypeName => "ComparableNullableOfDecimalOperationFilterInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.ComparableNullableOfDecimalOperationFilterInput;
            var inputInfo = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("neq", FormatNeq(input.Neq)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            if (inputInfo.IsNinSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nin", FormatNin(input.Nin)));
            }

            if (inputInfo.IsGtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gt", FormatGt(input.Gt)));
            }

            if (inputInfo.IsNgtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngt", FormatNgt(input.Ngt)));
            }

            if (inputInfo.IsGteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gte", FormatGte(input.Gte)));
            }

            if (inputInfo.IsNgteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ngte", FormatNgte(input.Ngte)));
            }

            if (inputInfo.IsLtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lt", FormatLt(input.Lt)));
            }

            if (inputInfo.IsNltSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlt", FormatNlt(input.Nlt)));
            }

            if (inputInfo.IsLteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lte", FormatLte(input.Lte)));
            }

            if (inputInfo.IsNlteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("nlte", FormatNlte(input.Nlte)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNeq(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.Decimal?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_decimalFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatNin(global::System.Collections.Generic.IReadOnlyList<global::System.Decimal?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_decimalFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatGt(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgt(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGte(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNgte(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLt(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlt(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLte(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNlte(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _decimalFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class ComparableNullableOfDecimalOperationFilterInput : global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo, global::System.IEquatable<ComparableNullableOfDecimalOperationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ComparableNullableOfDecimalOperationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ComparableNullableOfDecimalOperationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Eq == other.Eq) && Neq == other.Neq && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nin, other.Nin) && Gt == other.Gt && Ngt == other.Ngt && Gte == other.Gte && Ngte == other.Ngte && Lt == other.Lt && Nlt == other.Nlt && Lte == other.Lte && Nlte == other.Nlte;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Neq != null)
                {
                    hash ^= 397 * Neq.GetHashCode();
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        if (In_elm != null)
                        {
                            hash ^= 397 * In_elm.GetHashCode();
                        }
                    }
                }

                if (Nin != null)
                {
                    foreach (var Nin_elm in Nin)
                    {
                        if (Nin_elm != null)
                        {
                            hash ^= 397 * Nin_elm.GetHashCode();
                        }
                    }
                }

                if (Gt != null)
                {
                    hash ^= 397 * Gt.GetHashCode();
                }

                if (Ngt != null)
                {
                    hash ^= 397 * Ngt.GetHashCode();
                }

                if (Gte != null)
                {
                    hash ^= 397 * Gte.GetHashCode();
                }

                if (Ngte != null)
                {
                    hash ^= 397 * Ngte.GetHashCode();
                }

                if (Lt != null)
                {
                    hash ^= 397 * Lt.GetHashCode();
                }

                if (Nlt != null)
                {
                    hash ^= 397 * Nlt.GetHashCode();
                }

                if (Lte != null)
                {
                    hash ^= 397 * Lte.GetHashCode();
                }

                if (Nlte != null)
                {
                    hash ^= 397 * Nlte.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Decimal? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.Decimal? _value_neq;
        private global::System.Boolean _set_neq;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Decimal?>? _value_in;
        private global::System.Boolean _set_in;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Decimal?>? _value_nin;
        private global::System.Boolean _set_nin;
        private global::System.Decimal? _value_gt;
        private global::System.Boolean _set_gt;
        private global::System.Decimal? _value_ngt;
        private global::System.Boolean _set_ngt;
        private global::System.Decimal? _value_gte;
        private global::System.Boolean _set_gte;
        private global::System.Decimal? _value_ngte;
        private global::System.Boolean _set_ngte;
        private global::System.Decimal? _value_lt;
        private global::System.Boolean _set_lt;
        private global::System.Decimal? _value_nlt;
        private global::System.Boolean _set_nlt;
        private global::System.Decimal? _value_lte;
        private global::System.Boolean _set_lte;
        private global::System.Decimal? _value_nlte;
        private global::System.Boolean _set_nlte;
        public global::System.Decimal? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsEqSet => _set_eq;

        public global::System.Decimal? Neq
        {
            get => _value_neq;
            set
            {
                _set_neq = true;
                _value_neq = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsNeqSet => _set_neq;

        public global::System.Collections.Generic.IReadOnlyList<global::System.Decimal?>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsInSet => _set_in;

        public global::System.Collections.Generic.IReadOnlyList<global::System.Decimal?>? Nin
        {
            get => _value_nin;
            set
            {
                _set_nin = true;
                _value_nin = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsNinSet => _set_nin;

        public global::System.Decimal? Gt
        {
            get => _value_gt;
            set
            {
                _set_gt = true;
                _value_gt = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsGtSet => _set_gt;

        public global::System.Decimal? Ngt
        {
            get => _value_ngt;
            set
            {
                _set_ngt = true;
                _value_ngt = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsNgtSet => _set_ngt;

        public global::System.Decimal? Gte
        {
            get => _value_gte;
            set
            {
                _set_gte = true;
                _value_gte = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsGteSet => _set_gte;

        public global::System.Decimal? Ngte
        {
            get => _value_ngte;
            set
            {
                _set_ngte = true;
                _value_ngte = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsNgteSet => _set_ngte;

        public global::System.Decimal? Lt
        {
            get => _value_lt;
            set
            {
                _set_lt = true;
                _value_lt = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsLtSet => _set_lt;

        public global::System.Decimal? Nlt
        {
            get => _value_nlt;
            set
            {
                _set_nlt = true;
                _value_nlt = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsNltSet => _set_nlt;

        public global::System.Decimal? Lte
        {
            get => _value_lte;
            set
            {
                _set_lte = true;
                _value_lte = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsLteSet => _set_lte;

        public global::System.Decimal? Nlte
        {
            get => _value_nlte;
            set
            {
                _set_nlte = true;
                _value_nlte = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IComparableNullableOfDecimalOperationFilterInputInfo.IsNlteSet => _set_nlte;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieSortInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default !;
        public global::System.String TypeName => "MovieSortInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.MovieSortInput;
            var inputInfo = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsMovieIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("movieId", FormatMovieId(input.MovieId)));
            }

            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsOverviewSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("overview", FormatOverview(input.Overview)));
            }

            if (inputInfo.IsGenreSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("genre", FormatGenre(input.Genre)));
            }

            if (inputInfo.IsLanguageSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("language", FormatLanguage(input.Language)));
            }

            if (inputInfo.IsDurationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("duration", FormatDuration(input.Duration)));
            }

            if (inputInfo.IsRatingSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rating", FormatRating(input.Rating)));
            }

            if (inputInfo.IsPosterPathSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("posterPath", FormatPosterPath(input.PosterPath)));
            }

            return fields;
        }

        private global::System.Object? FormatMovieId(global::MovieApp.Client.GraphQLAPIClient.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTitle(global::MovieApp.Client.GraphQLAPIClient.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatOverview(global::MovieApp.Client.GraphQLAPIClient.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGenre(global::MovieApp.Client.GraphQLAPIClient.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLanguage(global::MovieApp.Client.GraphQLAPIClient.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDuration(global::MovieApp.Client.GraphQLAPIClient.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatRating(global::MovieApp.Client.GraphQLAPIClient.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPosterPath(global::MovieApp.Client.GraphQLAPIClient.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieSortInput : global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo, global::System.IEquatable<MovieSortInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MovieSortInput)obj);
        }

        public virtual global::System.Boolean Equals(MovieSortInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MovieId is null && other.MovieId is null) || MovieId != null && MovieId.Equals(other.MovieId))) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && ((Overview is null && other.Overview is null) || Overview != null && Overview.Equals(other.Overview)) && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Language is null && other.Language is null) || Language != null && Language.Equals(other.Language)) && ((Duration is null && other.Duration is null) || Duration != null && Duration.Equals(other.Duration)) && ((Rating is null && other.Rating is null) || Rating != null && Rating.Equals(other.Rating)) && ((PosterPath is null && other.PosterPath is null) || PosterPath != null && PosterPath.Equals(other.PosterPath));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (MovieId != null)
                {
                    hash ^= 397 * MovieId.GetHashCode();
                }

                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                if (Overview != null)
                {
                    hash ^= 397 * Overview.GetHashCode();
                }

                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Language != null)
                {
                    hash ^= 397 * Language.GetHashCode();
                }

                if (Duration != null)
                {
                    hash ^= 397 * Duration.GetHashCode();
                }

                if (Rating != null)
                {
                    hash ^= 397 * Rating.GetHashCode();
                }

                if (PosterPath != null)
                {
                    hash ^= 397 * PosterPath.GetHashCode();
                }

                return hash;
            }
        }

        private global::MovieApp.Client.GraphQLAPIClient.SortEnumType? _value_movieId;
        private global::System.Boolean _set_movieId;
        private global::MovieApp.Client.GraphQLAPIClient.SortEnumType? _value_title;
        private global::System.Boolean _set_title;
        private global::MovieApp.Client.GraphQLAPIClient.SortEnumType? _value_overview;
        private global::System.Boolean _set_overview;
        private global::MovieApp.Client.GraphQLAPIClient.SortEnumType? _value_genre;
        private global::System.Boolean _set_genre;
        private global::MovieApp.Client.GraphQLAPIClient.SortEnumType? _value_language;
        private global::System.Boolean _set_language;
        private global::MovieApp.Client.GraphQLAPIClient.SortEnumType? _value_duration;
        private global::System.Boolean _set_duration;
        private global::MovieApp.Client.GraphQLAPIClient.SortEnumType? _value_rating;
        private global::System.Boolean _set_rating;
        private global::MovieApp.Client.GraphQLAPIClient.SortEnumType? _value_posterPath;
        private global::System.Boolean _set_posterPath;
        public global::MovieApp.Client.GraphQLAPIClient.SortEnumType? MovieId
        {
            get => _value_movieId;
            set
            {
                _set_movieId = true;
                _value_movieId = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo.IsMovieIdSet => _set_movieId;

        public global::MovieApp.Client.GraphQLAPIClient.SortEnumType? Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo.IsTitleSet => _set_title;

        public global::MovieApp.Client.GraphQLAPIClient.SortEnumType? Overview
        {
            get => _value_overview;
            set
            {
                _set_overview = true;
                _value_overview = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo.IsOverviewSet => _set_overview;

        public global::MovieApp.Client.GraphQLAPIClient.SortEnumType? Genre
        {
            get => _value_genre;
            set
            {
                _set_genre = true;
                _value_genre = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo.IsGenreSet => _set_genre;

        public global::MovieApp.Client.GraphQLAPIClient.SortEnumType? Language
        {
            get => _value_language;
            set
            {
                _set_language = true;
                _value_language = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo.IsLanguageSet => _set_language;

        public global::MovieApp.Client.GraphQLAPIClient.SortEnumType? Duration
        {
            get => _value_duration;
            set
            {
                _set_duration = true;
                _value_duration = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo.IsDurationSet => _set_duration;

        public global::MovieApp.Client.GraphQLAPIClient.SortEnumType? Rating
        {
            get => _value_rating;
            set
            {
                _set_rating = true;
                _value_rating = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo.IsRatingSet => _set_rating;

        public global::MovieApp.Client.GraphQLAPIClient.SortEnumType? PosterPath
        {
            get => _value_posterPath;
            set
            {
                _set_posterPath = true;
                _value_posterPath = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieSortInputInfo.IsPosterPathSet => _set_posterPath;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public enum SortEnumType
    {
        Asc,
        Desc
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class SortEnumTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SortEnumType>
    {
        public global::System.String TypeName => "SortEnumType";

        public SortEnumType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "ASC" => SortEnumType.Asc,
                "DESC" => SortEnumType.Desc,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                SortEnumType.Asc => "ASC",
                SortEnumType.Desc => "DESC",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the EditMovieData GraphQL operation
    /// <code>
    /// mutation EditMovieData($movieData: MovieInput!) {
    ///   editMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class EditMovieDataMutationDocument : global::StrawberryShake.IDocument
    {
        private EditMovieDataMutationDocument()
        {
        }

        public static EditMovieDataMutationDocument Instance { get; } = new EditMovieDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x45,
            0x64,
            0x69,
            0x74,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x28,
            0x24,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x3a,
            0x20,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x65,
            0x64,
            0x69,
            0x74,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x28,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x69,
            0x74,
            0x6c,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1a6a1496824db42dc8855afb63a20891");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the EditMovieData GraphQL operation
    /// <code>
    /// mutation EditMovieData($movieData: MovieInput!) {
    ///   editMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class EditMovieDataMutation : global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IEditMovieDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _movieInputFormatter;
        public EditMovieDataMutation(global::StrawberryShake.IOperationExecutor<IEditMovieDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _movieInputFormatter = serializerResolver.GetInputValueFormatter("MovieInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IEditMovieDataResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEditMovieDataResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(movieData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IEditMovieDataResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(movieData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("movieData", FormatMovieData(movieData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: EditMovieDataMutationDocument.Instance.Hash.Value, name: "EditMovieData", document: EditMovieDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMovieData(global::MovieApp.Client.GraphQLAPIClient.MovieInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _movieInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the EditMovieData GraphQL operation
    /// <code>
    /// mutation EditMovieData($movieData: MovieInput!) {
    ///   editMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IEditMovieDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IEditMovieDataResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IEditMovieDataResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchMovieList GraphQL operation
    /// <code>
    /// query FetchMovieList {
    ///   movieList {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchMovieListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchMovieListQueryDocument()
        {
        }

        public static FetchMovieListQueryDocument Instance { get; } = new FetchMovieListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x46,
            0x65,
            0x74,
            0x63,
            0x68,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x49,
            0x64,
            0x20,
            0x74,
            0x69,
            0x74,
            0x6c,
            0x65,
            0x20,
            0x70,
            0x6f,
            0x73,
            0x74,
            0x65,
            0x72,
            0x50,
            0x61,
            0x74,
            0x68,
            0x20,
            0x67,
            0x65,
            0x6e,
            0x72,
            0x65,
            0x20,
            0x72,
            0x61,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x20,
            0x6c,
            0x61,
            0x6e,
            0x67,
            0x75,
            0x61,
            0x67,
            0x65,
            0x20,
            0x64,
            0x75,
            0x72,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "583932d702547951362677e832fa58b7");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchMovieList GraphQL operation
    /// <code>
    /// query FetchMovieList {
    ///   movieList {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchMovieListQuery : global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchMovieListResult> _operationExecutor;
        public FetchMovieListQuery(global::StrawberryShake.IOperationExecutor<IFetchMovieListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchMovieListResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchMovieListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchMovieListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchMovieListQueryDocument.Instance.Hash.Value, name: "FetchMovieList", document: FetchMovieListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchMovieList GraphQL operation
    /// <code>
    /// query FetchMovieList {
    ///   movieList {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchMovieListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchMovieListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchMovieListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddMovieData GraphQL operation
    /// <code>
    /// mutation AddMovieData($movieData: MovieInput!) {
    ///   addMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataMutationDocument : global::StrawberryShake.IDocument
    {
        private AddMovieDataMutationDocument()
        {
        }

        public static AddMovieDataMutationDocument Instance { get; } = new AddMovieDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x64,
            0x64,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x28,
            0x24,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x3a,
            0x20,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x64,
            0x64,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x28,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x69,
            0x74,
            0x6c,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "37e6da10a6006283a8fbd65a05bfefd3");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddMovieData GraphQL operation
    /// <code>
    /// mutation AddMovieData($movieData: MovieInput!) {
    ///   addMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataMutation : global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddMovieDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _movieInputFormatter;
        public AddMovieDataMutation(global::StrawberryShake.IOperationExecutor<IAddMovieDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _movieInputFormatter = serializerResolver.GetInputValueFormatter("MovieInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddMovieDataResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddMovieDataResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(movieData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddMovieDataResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(movieData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("movieData", FormatMovieData(movieData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddMovieDataMutationDocument.Instance.Hash.Value, name: "AddMovieData", document: AddMovieDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMovieData(global::MovieApp.Client.GraphQLAPIClient.MovieInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _movieInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddMovieData GraphQL operation
    /// <code>
    /// mutation AddMovieData($movieData: MovieInput!) {
    ///   addMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddMovieDataResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddMovieDataResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteMovieData GraphQL operation
    /// <code>
    /// mutation DeleteMovieData($movieID: Int!) {
    ///   deleteMovie(movieID: $movieID)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class DeleteMovieDataMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteMovieDataMutationDocument()
        {
        }

        public static DeleteMovieDataMutationDocument Instance { get; } = new DeleteMovieDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x44,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x44,
            0x61,
            0x74,
            0x61,
            0x28,
            0x24,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x49,
            0x44,
            0x3a,
            0x20,
            0x49,
            0x6e,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x64,
            0x65,
            0x6c,
            0x65,
            0x74,
            0x65,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x28,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x49,
            0x44,
            0x3a,
            0x20,
            0x24,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x49,
            0x44,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "af3f91085c0f0828c7c56f4068d0c4f3");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteMovieData GraphQL operation
    /// <code>
    /// mutation DeleteMovieData($movieID: Int!) {
    ///   deleteMovie(movieID: $movieID)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class DeleteMovieDataMutation : global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteMovieDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DeleteMovieDataMutation(global::StrawberryShake.IOperationExecutor<IDeleteMovieDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteMovieDataResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteMovieDataResult>> ExecuteAsync(global::System.Int32 movieID, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(movieID);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteMovieDataResult>> Watch(global::System.Int32 movieID, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(movieID);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 movieID)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("movieID", FormatMovieID(movieID));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteMovieDataMutationDocument.Instance.Hash.Value, name: "DeleteMovieData", document: DeleteMovieDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMovieID(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteMovieData GraphQL operation
    /// <code>
    /// mutation DeleteMovieData($movieID: Int!) {
    ///   deleteMovie(movieID: $movieID)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IDeleteMovieDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteMovieDataResult>> ExecuteAsync(global::System.Int32 movieID, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteMovieDataResult>> Watch(global::System.Int32 movieID, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchGenreList GraphQL operation
    /// <code>
    /// query FetchGenreList {
    ///   genreList {
    ///     __typename
    ///     genreId
    ///     genreName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchGenreListQueryDocument()
        {
        }

        public static FetchGenreListQueryDocument Instance { get; } = new FetchGenreListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x46,
            0x65,
            0x74,
            0x63,
            0x68,
            0x47,
            0x65,
            0x6e,
            0x72,
            0x65,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x67,
            0x65,
            0x6e,
            0x72,
            0x65,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x67,
            0x65,
            0x6e,
            0x72,
            0x65,
            0x49,
            0x64,
            0x20,
            0x67,
            0x65,
            0x6e,
            0x72,
            0x65,
            0x4e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6134424336e69ede86c543200c9fe400");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchGenreList GraphQL operation
    /// <code>
    /// query FetchGenreList {
    ///   genreList {
    ///     __typename
    ///     genreId
    ///     genreName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListQuery : global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchGenreListResult> _operationExecutor;
        public FetchGenreListQuery(global::StrawberryShake.IOperationExecutor<IFetchGenreListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchGenreListResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchGenreListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchGenreListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchGenreListQueryDocument.Instance.Hash.Value, name: "FetchGenreList", document: FetchGenreListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchGenreList GraphQL operation
    /// <code>
    /// query FetchGenreList {
    ///   genreList {
    ///     __typename
    ///     genreId
    ///     genreName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchGenreListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchGenreListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchGenreListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FilterMovieByID GraphQL operation
    /// <code>
    /// query FilterMovieByID($filterInput: MovieFilterInput) {
    ///   movieList(where: $filterInput) {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FilterMovieByIDQueryDocument : global::StrawberryShake.IDocument
    {
        private FilterMovieByIDQueryDocument()
        {
        }

        public static FilterMovieByIDQueryDocument Instance { get; } = new FilterMovieByIDQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x46,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x42,
            0x79,
            0x49,
            0x44,
            0x28,
            0x24,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x46,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x28,
            0x77,
            0x68,
            0x65,
            0x72,
            0x65,
            0x3a,
            0x20,
            0x24,
            0x66,
            0x69,
            0x6c,
            0x74,
            0x65,
            0x72,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x49,
            0x64,
            0x20,
            0x74,
            0x69,
            0x74,
            0x6c,
            0x65,
            0x20,
            0x70,
            0x6f,
            0x73,
            0x74,
            0x65,
            0x72,
            0x50,
            0x61,
            0x74,
            0x68,
            0x20,
            0x67,
            0x65,
            0x6e,
            0x72,
            0x65,
            0x20,
            0x72,
            0x61,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x20,
            0x6c,
            0x61,
            0x6e,
            0x67,
            0x75,
            0x61,
            0x67,
            0x65,
            0x20,
            0x64,
            0x75,
            0x72,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "11c2b535b811b7192095c84208a4b1b0");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FilterMovieByID GraphQL operation
    /// <code>
    /// query FilterMovieByID($filterInput: MovieFilterInput) {
    ///   movieList(where: $filterInput) {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FilterMovieByIDQuery : global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFilterMovieByIDResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _movieFilterInputFormatter;
        public FilterMovieByIDQuery(global::StrawberryShake.IOperationExecutor<IFilterMovieByIDResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _movieFilterInputFormatter = serializerResolver.GetInputValueFormatter("MovieFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFilterMovieByIDResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFilterMovieByIDResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput? filterInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filterInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFilterMovieByIDResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput? filterInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filterInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput? filterInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filterInput", FormatFilterInput(filterInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FilterMovieByIDQueryDocument.Instance.Hash.Value, name: "FilterMovieByID", document: FilterMovieByIDQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilterInput(global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _movieFilterInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the FilterMovieByID GraphQL operation
    /// <code>
    /// query FilterMovieByID($filterInput: MovieFilterInput) {
    ///   movieList(where: $filterInput) {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFilterMovieByIDQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFilterMovieByIDResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput? filterInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFilterMovieByIDResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieFilterInput? filterInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SortMovieList GraphQL operation
    /// <code>
    /// query SortMovieList($sortInput: MovieSortInput!) {
    ///   movieList(order: [ $sortInput ]) {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class SortMovieListQueryDocument : global::StrawberryShake.IDocument
    {
        private SortMovieListQueryDocument()
        {
        }

        public static SortMovieListQueryDocument Instance { get; } = new SortMovieListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x53,
            0x6f,
            0x72,
            0x74,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x28,
            0x24,
            0x73,
            0x6f,
            0x72,
            0x74,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x4d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x53,
            0x6f,
            0x72,
            0x74,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x4c,
            0x69,
            0x73,
            0x74,
            0x28,
            0x6f,
            0x72,
            0x64,
            0x65,
            0x72,
            0x3a,
            0x20,
            0x5b,
            0x20,
            0x24,
            0x73,
            0x6f,
            0x72,
            0x74,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x20,
            0x5d,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6d,
            0x6f,
            0x76,
            0x69,
            0x65,
            0x49,
            0x64,
            0x20,
            0x74,
            0x69,
            0x74,
            0x6c,
            0x65,
            0x20,
            0x70,
            0x6f,
            0x73,
            0x74,
            0x65,
            0x72,
            0x50,
            0x61,
            0x74,
            0x68,
            0x20,
            0x67,
            0x65,
            0x6e,
            0x72,
            0x65,
            0x20,
            0x72,
            0x61,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x20,
            0x6c,
            0x61,
            0x6e,
            0x67,
            0x75,
            0x61,
            0x67,
            0x65,
            0x20,
            0x64,
            0x75,
            0x72,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "92ca538f5094221a5bc01f79d04004e4");

        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SortMovieList GraphQL operation
    /// <code>
    /// query SortMovieList($sortInput: MovieSortInput!) {
    ///   movieList(order: [ $sortInput ]) {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class SortMovieListQuery : global::MovieApp.Client.GraphQLAPIClient.ISortMovieListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISortMovieListResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _movieSortInputFormatter;
        public SortMovieListQuery(global::StrawberryShake.IOperationExecutor<ISortMovieListResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _movieSortInputFormatter = serializerResolver.GetInputValueFormatter("MovieSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISortMovieListResult);

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISortMovieListResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieSortInput sortInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sortInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISortMovieListResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieSortInput sortInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sortInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::MovieApp.Client.GraphQLAPIClient.MovieSortInput sortInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sortInput", FormatSortInput(sortInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SortMovieListQueryDocument.Instance.Hash.Value, name: "SortMovieList", document: SortMovieListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSortInput(global::MovieApp.Client.GraphQLAPIClient.MovieSortInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _movieSortInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SortMovieList GraphQL operation
    /// <code>
    /// query SortMovieList($sortInput: MovieSortInput!) {
    ///   movieList(order: [ $sortInput ]) {
    ///     __typename
    ///     movieId
    ///     title
    ///     posterPath
    ///     genre
    ///     rating
    ///     language
    ///     duration
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface ISortMovieListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISortMovieListResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieSortInput sortInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISortMovieListResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieSortInput sortInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the MovieClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieClient : global::MovieApp.Client.GraphQLAPIClient.IMovieClient
    {
        private readonly global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataMutation _editMovieData;
        private readonly global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListQuery _fetchMovieList;
        private readonly global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation _addMovieData;
        private readonly global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataMutation _deleteMovieData;
        private readonly global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery _fetchGenreList;
        private readonly global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDQuery _filterMovieByID;
        private readonly global::MovieApp.Client.GraphQLAPIClient.ISortMovieListQuery _sortMovieList;
        public MovieClient(global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataMutation editMovieData, global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListQuery fetchMovieList, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation addMovieData, global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataMutation deleteMovieData, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery fetchGenreList, global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDQuery filterMovieByID, global::MovieApp.Client.GraphQLAPIClient.ISortMovieListQuery sortMovieList)
        {
            _editMovieData = editMovieData ?? throw new global::System.ArgumentNullException(nameof(editMovieData));
            _fetchMovieList = fetchMovieList ?? throw new global::System.ArgumentNullException(nameof(fetchMovieList));
            _addMovieData = addMovieData ?? throw new global::System.ArgumentNullException(nameof(addMovieData));
            _deleteMovieData = deleteMovieData ?? throw new global::System.ArgumentNullException(nameof(deleteMovieData));
            _fetchGenreList = fetchGenreList ?? throw new global::System.ArgumentNullException(nameof(fetchGenreList));
            _filterMovieByID = filterMovieByID ?? throw new global::System.ArgumentNullException(nameof(filterMovieByID));
            _sortMovieList = sortMovieList ?? throw new global::System.ArgumentNullException(nameof(sortMovieList));
        }

        public static global::System.String ClientName => "MovieClient";
        public global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataMutation EditMovieData => _editMovieData;
        public global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListQuery FetchMovieList => _fetchMovieList;
        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation AddMovieData => _addMovieData;
        public global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataMutation DeleteMovieData => _deleteMovieData;
        public global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery FetchGenreList => _fetchGenreList;
        public global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDQuery FilterMovieByID => _filterMovieByID;
        public global::MovieApp.Client.GraphQLAPIClient.ISortMovieListQuery SortMovieList => _sortMovieList;
    }

    /// <summary>
    /// Represents the MovieClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IMovieClient
    {
        global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataMutation EditMovieData { get; }

        global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListQuery FetchMovieList { get; }

        global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation AddMovieData { get; }

        global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataMutation DeleteMovieData { get; }

        global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery FetchGenreList { get; }

        global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDQuery FilterMovieByID { get; }

        global::MovieApp.Client.GraphQLAPIClient.ISortMovieListQuery SortMovieList { get; }
    }
}

namespace MovieApp.Client.GraphQLAPIClient.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class EditMovieDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.EditMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public EditMovieDataResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult);

        public EditMovieDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is EditMovieDataResultInfo info)
            {
                return new EditMovieDataResult(MapNonNullableIEditMovieData_EditMovie(info.EditMovie, snapshot));
            }

            throw new global::System.ArgumentException("EditMovieDataResultInfo expected.");
        }

        private global::MovieApp.Client.GraphQLAPIClient.IEditMovieData_EditMovie MapNonNullableIEditMovieData_EditMovie(global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IEditMovieData_EditMovie returnValue = default !;
            if (data.__typename.Equals("AddMoviePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new EditMovieData_EditMovie_AddMoviePayload(MapNonNullableIEditMovieData_EditMovie_Movie(data.Movie ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::MovieApp.Client.GraphQLAPIClient.IEditMovieData_EditMovie_Movie MapNonNullableIEditMovieData_EditMovie_Movie(global::MovieApp.Client.GraphQLAPIClient.State.MovieData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IEditMovieData_EditMovie_Movie returnValue = default !;
            if (data.__typename.Equals("Movie", global::System.StringComparison.Ordinal))
            {
                returnValue = new EditMovieData_EditMovie_Movie_Movie(data.Title ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class EditMovieDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public EditMovieDataResultInfo(global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData editMovie, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            EditMovie = editMovie;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Edit an existing movie-data.
        /// </summary>
        public global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData EditMovie { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new EditMovieDataResultInfo(EditMovie, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchMovieListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.FetchMovieListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchMovieListResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult);

        public FetchMovieListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchMovieListResultInfo info)
            {
                return new FetchMovieListResult(MapNonNullableIFetchMovieList_MovieListNonNullableArray(info.MovieList, snapshot));
            }

            throw new global::System.ArgumentException("FetchMovieListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieList_MovieList> MapNonNullableIFetchMovieList_MovieListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var movies = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieList_MovieList>();
            foreach (global::MovieApp.Client.GraphQLAPIClient.State.MovieData child in list)
            {
                movies.Add(MapNonNullableIFetchMovieList_MovieList(child, snapshot));
            }

            return movies;
        }

        private global::MovieApp.Client.GraphQLAPIClient.IFetchMovieList_MovieList MapNonNullableIFetchMovieList_MovieList(global::MovieApp.Client.GraphQLAPIClient.State.MovieData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFetchMovieList_MovieList returnValue = default !;
            if (data.__typename.Equals("Movie", global::System.StringComparison.Ordinal))
            {
                returnValue = new FetchMovieList_MovieList_Movie(data.MovieId ?? throw new global::System.ArgumentNullException(), data.Title ?? throw new global::System.ArgumentNullException(), data.PosterPath, data.Genre ?? throw new global::System.ArgumentNullException(), data.Rating ?? throw new global::System.ArgumentNullException(), data.Language ?? throw new global::System.ArgumentNullException(), data.Duration ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchMovieListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchMovieListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> movieList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            MovieList = movieList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> MovieList { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchMovieListResultInfo(MovieList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.AddMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddMovieDataResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult);

        public AddMovieDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddMovieDataResultInfo info)
            {
                return new AddMovieDataResult(MapNonNullableIAddMovieData_AddMovie(info.AddMovie, snapshot));
            }

            throw new global::System.ArgumentException("AddMovieDataResultInfo expected.");
        }

        private global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie MapNonNullableIAddMovieData_AddMovie(global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddMovieData_AddMovie returnValue = default !;
            if (data.__typename.Equals("AddMoviePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddMovieData_AddMovie_AddMoviePayload(MapNonNullableIAddMovieData_AddMovie_Movie(data.Movie ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie_Movie MapNonNullableIAddMovieData_AddMovie_Movie(global::MovieApp.Client.GraphQLAPIClient.State.MovieData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddMovieData_AddMovie_Movie returnValue = default !;
            if (data.__typename.Equals("Movie", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddMovieData_AddMovie_Movie_Movie(data.Title ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddMovieDataResultInfo(global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData addMovie, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddMovie = addMovie;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Add new movie data.
        /// </summary>
        public global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData AddMovie { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddMovieDataResultInfo(AddMovie, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class DeleteMovieDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.DeleteMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteMovieDataResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult);

        public DeleteMovieDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteMovieDataResultInfo info)
            {
                return new DeleteMovieDataResult(info.DeleteMovie);
            }

            throw new global::System.ArgumentException("DeleteMovieDataResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class DeleteMovieDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteMovieDataResultInfo(global::System.Int32 deleteMovie, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteMovie = deleteMovie;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Delete a movie
        /// </summary>
        public global::System.Int32 DeleteMovie { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteMovieDataResultInfo(DeleteMovie, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.FetchGenreListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchGenreListResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult);

        public FetchGenreListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchGenreListResultInfo info)
            {
                return new FetchGenreListResult(MapNonNullableIFetchGenreList_GenreListNonNullableArray(info.GenreList, snapshot));
            }

            throw new global::System.ArgumentException("FetchGenreListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList> MapNonNullableIFetchGenreList_GenreListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.GenreData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var genres = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList>();
            foreach (global::MovieApp.Client.GraphQLAPIClient.State.GenreData child in list)
            {
                genres.Add(MapNonNullableIFetchGenreList_GenreList(child, snapshot));
            }

            return genres;
        }

        private global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList MapNonNullableIFetchGenreList_GenreList(global::MovieApp.Client.GraphQLAPIClient.State.GenreData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFetchGenreList_GenreList returnValue = default !;
            if (data.__typename.Equals("Genre", global::System.StringComparison.Ordinal))
            {
                returnValue = new FetchGenreList_GenreList_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.GenreName ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchGenreListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.GenreData> genreList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GenreList = genreList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// gets the list of genres
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.GenreData> GenreList { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchGenreListResultInfo(GenreList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FilterMovieByIDResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.FilterMovieByIDResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FilterMovieByIDResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult);

        public FilterMovieByIDResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FilterMovieByIDResultInfo info)
            {
                return new FilterMovieByIDResult(MapNonNullableIFilterMovieByID_MovieListNonNullableArray(info.MovieList, snapshot));
            }

            throw new global::System.ArgumentException("FilterMovieByIDResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByID_MovieList> MapNonNullableIFilterMovieByID_MovieListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var movies = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByID_MovieList>();
            foreach (global::MovieApp.Client.GraphQLAPIClient.State.MovieData child in list)
            {
                movies.Add(MapNonNullableIFilterMovieByID_MovieList(child, snapshot));
            }

            return movies;
        }

        private global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByID_MovieList MapNonNullableIFilterMovieByID_MovieList(global::MovieApp.Client.GraphQLAPIClient.State.MovieData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFilterMovieByID_MovieList returnValue = default !;
            if (data.__typename.Equals("Movie", global::System.StringComparison.Ordinal))
            {
                returnValue = new FilterMovieByID_MovieList_Movie(data.MovieId ?? throw new global::System.ArgumentNullException(), data.Title ?? throw new global::System.ArgumentNullException(), data.PosterPath, data.Genre ?? throw new global::System.ArgumentNullException(), data.Rating ?? throw new global::System.ArgumentNullException(), data.Language ?? throw new global::System.ArgumentNullException(), data.Duration ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FilterMovieByIDResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FilterMovieByIDResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> movieList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            MovieList = movieList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> MovieList { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FilterMovieByIDResultInfo(MovieList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class SortMovieListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.SortMovieListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SortMovieListResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult);

        public SortMovieListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SortMovieListResultInfo info)
            {
                return new SortMovieListResult(MapNonNullableISortMovieList_MovieListNonNullableArray(info.MovieList, snapshot));
            }

            throw new global::System.ArgumentException("SortMovieListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.ISortMovieList_MovieList> MapNonNullableISortMovieList_MovieListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var movies = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.ISortMovieList_MovieList>();
            foreach (global::MovieApp.Client.GraphQLAPIClient.State.MovieData child in list)
            {
                movies.Add(MapNonNullableISortMovieList_MovieList(child, snapshot));
            }

            return movies;
        }

        private global::MovieApp.Client.GraphQLAPIClient.ISortMovieList_MovieList MapNonNullableISortMovieList_MovieList(global::MovieApp.Client.GraphQLAPIClient.State.MovieData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ISortMovieList_MovieList returnValue = default !;
            if (data.__typename.Equals("Movie", global::System.StringComparison.Ordinal))
            {
                returnValue = new SortMovieList_MovieList_Movie(data.MovieId ?? throw new global::System.ArgumentNullException(), data.Title ?? throw new global::System.ArgumentNullException(), data.PosterPath, data.Genre ?? throw new global::System.ArgumentNullException(), data.Rating ?? throw new global::System.ArgumentNullException(), data.Language ?? throw new global::System.ArgumentNullException(), data.Duration ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class SortMovieListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SortMovieListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> movieList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            MovieList = movieList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// gets the list of movies.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> MovieList { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SortMovieListResultInfo(MovieList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IMovieInputInfo
    {
        global::System.Boolean IsMovieIdSet { get; }

        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsOverviewSet { get; }

        global::System.Boolean IsGenreSet { get; }

        global::System.Boolean IsLanguageSet { get; }

        global::System.Boolean IsDurationSet { get; }

        global::System.Boolean IsRatingSet { get; }

        global::System.Boolean IsPosterPathSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IMovieFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsMovieIdSet { get; }

        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsOverviewSet { get; }

        global::System.Boolean IsGenreSet { get; }

        global::System.Boolean IsLanguageSet { get; }

        global::System.Boolean IsDurationSet { get; }

        global::System.Boolean IsRatingSet { get; }

        global::System.Boolean IsPosterPathSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IComparableInt32OperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsGtSet { get; }

        global::System.Boolean IsNgtSet { get; }

        global::System.Boolean IsGteSet { get; }

        global::System.Boolean IsNgteSet { get; }

        global::System.Boolean IsLtSet { get; }

        global::System.Boolean IsNltSet { get; }

        global::System.Boolean IsLteSet { get; }

        global::System.Boolean IsNlteSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IStringOperationFilterInputInfo
    {
        global::System.Boolean IsAndSet { get; }

        global::System.Boolean IsOrSet { get; }

        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsContainsSet { get; }

        global::System.Boolean IsNcontainsSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsStartsWithSet { get; }

        global::System.Boolean IsNstartsWithSet { get; }

        global::System.Boolean IsEndsWithSet { get; }

        global::System.Boolean IsNendsWithSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IComparableNullableOfDecimalOperationFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeqSet { get; }

        global::System.Boolean IsInSet { get; }

        global::System.Boolean IsNinSet { get; }

        global::System.Boolean IsGtSet { get; }

        global::System.Boolean IsNgtSet { get; }

        global::System.Boolean IsGteSet { get; }

        global::System.Boolean IsNgteSet { get; }

        global::System.Boolean IsLtSet { get; }

        global::System.Boolean IsNltSet { get; }

        global::System.Boolean IsLteSet { get; }

        global::System.Boolean IsNlteSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IMovieSortInputInfo
    {
        global::System.Boolean IsMovieIdSet { get; }

        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsOverviewSet { get; }

        global::System.Boolean IsGenreSet { get; }

        global::System.Boolean IsLanguageSet { get; }

        global::System.Boolean IsDurationSet { get; }

        global::System.Boolean IsRatingSet { get; }

        global::System.Boolean IsPosterPathSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class EditMovieDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public EditMovieDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IEditMovieDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IEditMovieDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IEditMovieDataResult Result, EditMovieDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IEditMovieDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IEditMovieDataResult, EditMovieDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new EditMovieDataResultInfo(DeserializeNonNullableIEditMovieData_EditMovie(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "editMovie")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData DeserializeNonNullableIEditMovieData_EditMovie(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddMoviePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData(typename, movie: DeserializeNonNullableIEditMovieData_EditMovie_Movie(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movie")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.MovieData DeserializeNonNullableIEditMovieData_EditMovie_Movie(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Movie", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.MovieData(typename, title: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchMovieListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public FetchMovieListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchMovieListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchMovieListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchMovieListResult Result, FetchMovieListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchMovieListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchMovieListResult, FetchMovieListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchMovieListResultInfo(DeserializeNonNullableIFetchMovieList_MovieListNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movieList")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> DeserializeNonNullableIFetchMovieList_MovieListNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var movies = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.State.MovieData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                movies.Add(DeserializeNonNullableIFetchMovieList_MovieList(child));
            }

            return movies;
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.MovieData DeserializeNonNullableIFetchMovieList_MovieList(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Movie", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.MovieData(typename, movieId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movieId")), title: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), posterPath: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "posterPath")), genre: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), rating: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rating")), language: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), duration: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "duration")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public AddMovieDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddMovieDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddMovieDataResult Result, AddMovieDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IAddMovieDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddMovieDataResult, AddMovieDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddMovieDataResultInfo(DeserializeNonNullableIAddMovieData_AddMovie(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addMovie")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData DeserializeNonNullableIAddMovieData_AddMovie(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddMoviePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData(typename, movie: DeserializeNonNullableIAddMovieData_AddMovie_Movie(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movie")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.MovieData DeserializeNonNullableIAddMovieData_AddMovie_Movie(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Movie", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.MovieData(typename, title: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class DeleteMovieDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public DeleteMovieDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IDeleteMovieDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteMovieDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteMovieDataResult Result, DeleteMovieDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IDeleteMovieDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteMovieDataResult, DeleteMovieDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteMovieDataResultInfo(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteMovie")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public FetchGenreListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchGenreListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchGenreListResult Result, FetchGenreListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchGenreListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchGenreListResult, FetchGenreListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchGenreListResultInfo(DeserializeNonNullableIFetchGenreList_GenreListNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreList")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.GenreData> DeserializeNonNullableIFetchGenreList_GenreListNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var genres = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.State.GenreData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeNonNullableIFetchGenreList_GenreList(child));
            }

            return genres;
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.GenreData DeserializeNonNullableIFetchGenreList_GenreList(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), genreName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FilterMovieByIDBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public FilterMovieByIDBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFilterMovieByIDResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IFilterMovieByIDResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFilterMovieByIDResult Result, FilterMovieByIDResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IFilterMovieByIDResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFilterMovieByIDResult, FilterMovieByIDResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FilterMovieByIDResultInfo(DeserializeNonNullableIFilterMovieByID_MovieListNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movieList")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> DeserializeNonNullableIFilterMovieByID_MovieListNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var movies = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.State.MovieData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                movies.Add(DeserializeNonNullableIFilterMovieByID_MovieList(child));
            }

            return movies;
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.MovieData DeserializeNonNullableIFilterMovieByID_MovieList(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Movie", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.MovieData(typename, movieId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movieId")), title: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), posterPath: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "posterPath")), genre: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), rating: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rating")), language: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), duration: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "duration")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class SortMovieListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::MovieApp.Client.GraphQLAPIClient.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public SortMovieListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.ISortMovieListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::MovieApp.Client.GraphQLAPIClient.SortEnumType>("SortEnumType") ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<ISortMovieListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISortMovieListResult Result, SortMovieListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<ISortMovieListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISortMovieListResult, SortMovieListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SortMovieListResultInfo(DeserializeNonNullableISortMovieList_MovieListNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movieList")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.MovieData> DeserializeNonNullableISortMovieList_MovieListNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var movies = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.State.MovieData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                movies.Add(DeserializeNonNullableISortMovieList_MovieList(child));
            }

            return movies;
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.MovieData DeserializeNonNullableISortMovieList_MovieList(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Movie", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.MovieData(typename, movieId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movieId")), title: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), posterPath: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "posterPath")), genre: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), rating: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rating")), language: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "language")), duration: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "duration")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMoviePayloadData
    {
        public AddMoviePayloadData(global::System.String __typename, global::MovieApp.Client.GraphQLAPIClient.State.MovieData? movie = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Movie = movie;
        }

        public global::System.String __typename { get; }
        public global::MovieApp.Client.GraphQLAPIClient.State.MovieData? Movie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieData
    {
        public MovieData(global::System.String __typename, global::System.String? title = default !, global::System.Int32? movieId = default !, global::System.String? posterPath = default !, global::System.String? genre = default !, global::System.Decimal? rating = default !, global::System.String? language = default !, global::System.Int32? duration = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Title = title;
            MovieId = movieId;
            PosterPath = posterPath;
            Genre = genre;
            Rating = rating;
            Language = language;
            Duration = duration;
        }

        public global::System.String __typename { get; }
        public global::System.String? Title { get; }
        public global::System.Int32? MovieId { get; }
        public global::System.String? PosterPath { get; }
        public global::System.String? Genre { get; }
        public global::System.Decimal? Rating { get; }
        public global::System.String? Language { get; }
        public global::System.Int32? Duration { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class GenreData
    {
        public GenreData(global::System.String __typename, global::System.Int32? genreId = default !, global::System.String? genreName = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GenreId = genreId;
            GenreName = genreName;
        }

        public global::System.String __typename { get; }
        public global::System.Int32? GenreId { get; }
        public global::System.String? GenreName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public MovieClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
